let data = { emails: [] };
export function initializeApp() {}
export const FieldValue = { increment: (n) => ({ __increment: n }) };
export function firestore() {
  return {
    collection: (name) => ({
      get: async () => ({ size: (data[name] || []).length })
    }),
    doc: (path) => ({
      async get() {
        return { data: () => data[path], exists: Object.prototype.hasOwnProperty.call(data, path) };
      },
      async set(val, opts = {}) {
        const prev = data[path] || {};
        const updated = {};
        for (const k in val) {
          const v = val[k];
          if (v && typeof v === 'object' && '__increment' in v) {
            updated[k] = (prev[k] || 0) + v.__increment;
          } else {
            updated[k] = v;
          }
        }
        data[path] = opts.merge ? { ...prev, ...updated } : updated;
      }
    })
  };
}
firestore.FieldValue = FieldValue;
export function __setData(newData) { data = newData; }
export function __getData(path) { return data[path]; }
